---
- name: Install Clickhouse
  hosts: 
    - clickhouse
  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.systemd:
        name: clickhouse-server
        state: restarted
        enabled: yes
    - name: reload firewalld
      become: true
      ansible.builtin.systemd:
        name: firewalld
        state: restarted
    - name:  Start httpd service
      become: true
      ansible.builtin.systemd:
        name: httpd
        state: restarted
        enabled: yes


  tasks:
    - block:          
        - name: Get clickhouse distrib
          become: true
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
            dest: "files/{{ item }}-{{ clickhouse_version }}.rpm"
          with_items: "{{ clickhouse_packages }}"
      rescue:
        - name: Get clickhouse distrib
          become: true
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
            dest: "files/clickhouse-common-static-{{ clickhouse_version }}.rpm"
      delegate_to: localhost
      run_once: true      
      tags: 
        - "install clickhouse"
   
    - name: Create a directory clickhouse if it does not exist
      ansible.builtin.file:
        path: ./clickhouse
        state: directory
        mode: '0755'
      tags: 
        - "install clickhouse" 
   
    - name: Copy clickhouse packages
      copy:
        src: "{{ item }}"
        dest: ./clickhouse/
      with_items: 
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
      tags: 
        - "install clickhouse"
    
    - name: Install clickhouse packages
      become: true
      ansible.builtin.yum: 
        name: "{{ item }}"
      with_items:
          - "clickhouse/clickhouse-common-static-{{ clickhouse_version }}.rpm"
          - "clickhouse/clickhouse-client-{{ clickhouse_version }}.rpm"
          - "clickhouse/clickhouse-server-{{ clickhouse_version }}.rpm"
      notify: Start clickhouse service
      tags: 
        - "install clickhouse"

    - name: Copy conf
      template:
        src: config.j2
        dest:  /etc/clickhouse-server/config.xml
        backup: true
        mode: "0600"
      notify:  Start clickhouse service
      tags: 
        - "config clickhouse"
        - "install clickhouse"
    
    - name: Open port "{{ clickhouse_http_port }}"
      become: true
      vars:
        ansible_python_interpreter: /usr/bin/python
      ansible.posix.firewalld:
        port: "{{ clickhouse_http_port }}/tcp"
        permanent: yes
        state: enabled
      notify: reload firewalld
      tags:
        - "install clickhouse"
        
    - name :  Start clickhouse service if need 
      ansible.builtin.meta: flush_handlers
    
    - name: Create database
      become: true
      ansible.builtin.command: "clickhouse-client   -q 'CREATE DATABASE IF NOT EXISTS logs'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc !=82
      changed_when: create_db.rc == 0
      tags: 
        - "db clickhouse"
        - "install clickhouse"
    
    - name: Create database
      ansible.builtin.command: "clickhouse-client -q  'CREATE TABLE IF NOT EXISTS  logs.lastlog ( message String ) ENGINE = MergeTree() ORDER BY tuple();'"
      register: create_table
      failed_when: create_table.rc != 0 and create_table.rc !=82
      changed_when: create_table.rc == 0
      tags: 
        - "db clickhouse"
        - "install clickhouse"


- name: Install Lighthouse
  hosts: 
    - Lighthouse
  handlers:
    - name: reload firewalld
      become: true
      ansible.builtin.systemd:
        name: firewalld
        state: restarted
    - name:  Start httpd service
      become: true
      ansible.builtin.systemd:
        name: httpd
        state: restarted
        enabled: yes
  tasks:
    - name: Download Lighthouse
      become: true
      ansible.builtin.get_url:
        url: https://github.com/VKCOM/lighthouse/archive/refs/heads/master.zip
        dest: "files/Lighthouse.zip"
      delegate_to: localhost
      run_once: true
      tags: 
        - "install Lighthouse"
    
    - name: install packages
      become: true
      ansible.builtin.yum: 
        name: "{{ item }}"
      with_items:
          - "httpd"
          - "unzip"
      notify: Start httpd service
      tags: 
        - "install Lighthouse"
    
    - name: Create a directory Lighthouse if it does not exist
      ansible.builtin.file:
        path: ./Lighthouse
        state: directory
        mode: '0755'
      tags: 
        - "install Lighthouse" 
   
    - name: Unarchive Lighthouse packages
      unarchive:
        src: "files/Lighthouse.zip"
        dest: ./Lighthouse/
      tags: 
        - "install Lighthouse"
   
    - name: Copy Lighthouse to /var/www/html/
      ansible.builtin.copy:
        src:  ./Lighthouse/lighthouse-master/
        dest: /var/www/html/     
        remote_src: yes
      tags: 
        - "install Lighthouse"
    
    - name: Open port for Lighthouse
      become: true
      vars:
        ansible_python_interpreter: /usr/bin/python
      ansible.posix.firewalld:
        port: "80/tcp"
        permanent: yes
        state: enabled
      notify: reload firewalld
             
- name: Install Vector
  hosts: vector
  handlers:
  - name: Start vector service
    become: true
    ansible.builtin.systemd:
      name: vector
      state: restarted

  tasks:
  - name: Download Vector
    become: true
    ansible.builtin.get_url:
      url: "{{ vector_url }}"
      dest: files/vector-{{ vector_release }}-{{ vector_version }}.x86_64.rpm
    delegate_to: localhost
    run_once: true
    tags: 
      - "install vector"

  - name: Create a directory Vector if it does not exist
    ansible.builtin.file:
        path: ./vector
        state: directory
        mode: '0755'
    tags: 
        - "install vector"

  - name: Copy Vector packages
    copy:
      src:  vector-{{ vector_release }}-{{ vector_version }}.x86_64.rpm
      dest: ./vector/
    tags: 
      - "install vector"      

  - name: Install vector packages
    become: true
    ansible.builtin.yum:
      name: ./vector/vector-{{ vector_release }}-{{ vector_version }}.x86_64.rpm
      state: present
    notify: Start vector service
    tags: 
      - "install vector"
  
  - name: Copy config vector
    template:
        src: vector.j2
        dest:  /etc/vector/vector.toml
        backup: true
    notify: Start vector service
    tags: 
      - "config vector"
      - "install vector"